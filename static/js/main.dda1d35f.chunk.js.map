{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","e","preventDefault","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJjBC,EAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GAER,qBAAKC,UAAU,YAAf,SACKD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLjDQ,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBAAOC,KAAK,SACLf,UAAU,SACVgB,YAAaH,EACbI,SAAUH,MCgCVI,E,kDAlCX,aAAe,IAAD,8BACV,gBAaJJ,aAAe,SAACK,GACZA,EAAEC,iBACF,EAAKC,SAAS,CACVC,YAAaH,EAAEI,OAAOC,SAf1B,EAAKC,MAAQ,CACTf,SAAU,GACVY,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAAUoB,S,oBAUhD,WAAU,IAAD,EAC6BC,KAAKN,MAA/Bf,EADH,EACGA,SAAUY,EADb,EACaA,YACZU,EAAmBtB,EAASuB,QAAO,SAAA9B,GAAO,OAAIA,EAAQE,KAAK6B,cAAcC,SAASb,EAAYY,kBACpG,OACI,sBAAKlC,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CAAWa,YAAW,kBAAqBC,aAAciB,KAAKjB,eAC9D,cAAC,EAAD,CAAUJ,SAAUsB,W,GA7BlBI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dda1d35f.chunk.js","sourcesContent":["import {React} from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => {\n    return (\n        <div className=\"card-container\">\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h1>{props.monster.name}</h1>\n            <p>{props.monster.email}</p>\n        </div>\n    );\n};","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from \"../card/card.component\";\n\nexport const CardList = (props) => {\n    console.log(props);\n    return (\n        <div className='card-list'>\n            {props.monsters.map(monster => <Card key={monster.id} monster={monster} />)}\n        </div>\n    );\n};","import {React} from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeHolder, handleChange }) => {\n    return (\n        <input type=\"search\"\n               className=\"search\"\n               placeholder={placeHolder}\n               onChange={handleChange}/>\n    );\n};","import {React, Component} from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            monsters: [],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => response.json())\n            .then(users => this.setState({monsters: users}))\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        this.setState({\n            searchField: e.target.value\n        })\n    }\n\n    render() {\n        const { monsters, searchField } = this.state;\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n        return (\n            <div className=\"App\">\n                <h1>Monsters Rolodex</h1>\n                <SearchBox placeHolder={`Search monsters`} handleChange={this.handleChange} />\n                <CardList monsters={filteredMonsters} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}